'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDnd = require('react-dnd');

var _emptyImage = require('./utils/emptyImage');

var _emptyImage2 = _interopRequireDefault(_emptyImage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HueDragSource = function (_React$PureComponent) {
  _inherits(HueDragSource, _React$PureComponent);

  function HueDragSource() {
    _classCallCheck(this, HueDragSource);

    return _possibleConstructorReturn(this, (HueDragSource.__proto__ || Object.getPrototypeOf(HueDragSource)).apply(this, arguments));
  }

  _createClass(HueDragSource, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var img = new Image();
      img.onload = function () {
        return _this2.props.connectDragPreview(img);
      };
      img.src = _emptyImage2.default;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          radius = _props.radius,
          connectDragSource = _props.connectDragSource;

      var style = {
        position: 'absolute',
        width: 2 * radius,
        height: 2 * radius,
        border: 'none',
        top: 0, left: 0,
        borderRadius: '50%',
        cursor: 'pointer'
      };

      return connectDragSource(_react2.default.createElement('div', { style: style }));
    }
  }]);

  return HueDragSource;
}(_react2.default.PureComponent);

var cardSource = {
  beginDrag: function beginDrag(props) {
    var componentId = props.componentId;

    var el = document.getElementById('color-picker-root-' + componentId);
    var bb = el.getBoundingClientRect();

    return {
      boundingBox: bb
    };
  },

  endDrag: function endDrag(props, monitor) {
    var radius = props.radius;

    var _monitor$getClientOff = monitor.getClientOffset(),
        x = _monitor$getClientOff.x,
        y = _monitor$getClientOff.y;

    var _monitor$getItem = monitor.getItem(),
        boundingBox = _monitor$getItem.boundingBox;

    var left = boundingBox.left,
        top = boundingBox.top;


    var x1 = x - left - radius;
    var y1 = y - top - radius;

    var h2 = -Math.atan2(y1, x1) / Math.PI * 180;
    h2 = (h2 + 3600) % 360;
    h2 = Math.round(h2);

    if (props.onHueChange) {
      props.onHueChange(h2);
    }
  }
};

var collect = function collect(connect, monitor) {
  return {
    connectDragSource: connect.dragSource(),
    connectDragPreview: connect.dragPreview(),
    isDragging: monitor.isDragging()
  };
};

exports.default = (0, _reactDnd.DragSource)('hue', cardSource, collect)(HueDragSource);