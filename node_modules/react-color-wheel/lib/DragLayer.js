'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDnd = require('react-dnd');

var _Rainbow = require('./Rainbow');

var _Rainbow2 = _interopRequireDefault(_Rainbow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CustomDragLayer = function (_React$PureComponent) {
  _inherits(CustomDragLayer, _React$PureComponent);

  function CustomDragLayer(props) {
    _classCallCheck(this, CustomDragLayer);

    return _possibleConstructorReturn(this, (CustomDragLayer.__proto__ || Object.getPrototypeOf(CustomDragLayer)).call(this, props));
  }

  _createClass(CustomDragLayer, [{
    key: 'getHue',
    value: function getHue() {
      var _props = this.props,
          hue = _props.hue,
          offset = _props.offset,
          itemType = _props.itemType,
          radius = _props.radius;


      if (!offset) return hue;
      if (itemType !== 'hue') return hue;

      var x = offset.x,
          y = offset.y;

      var x1 = x - radius;
      var y1 = y - radius;

      var h2 = -Math.atan2(y1, x1) / Math.PI * 180;
      h2 = (h2 + 3600) % 360;
      h2 = Math.round(h2);

      return h2;
    }
  }, {
    key: 'getSaturationValue',
    value: function getSaturationValue() {
      var _props2 = this.props,
          hue = _props2.hue,
          saturation = _props2.saturation,
          value = _props2.value,
          offset = _props2.offset,
          itemType = _props2.itemType,
          radius = _props2.radius,
          thickness = _props2.thickness;


      if (!offset) return { saturation: saturation, value: value };
      if (itemType !== 'saturation-value') return { saturation: saturation, value: value };

      var x = offset.x,
          y = offset.y;

      var x1 = x - radius;
      var y1 = y - radius;

      var rx1 = x1 / (radius - thickness);
      var ry1 = y1 / (radius - thickness);

      var ang = 5 * Math.PI / 3 + hue / 180 * Math.PI;
      var cos30 = Math.cos(ang);
      var sin30 = Math.sin(ang);

      var e1 = +cos30 * rx1 - sin30 * ry1;
      var e2 = -sin30 * rx1 - cos30 * ry1;

      var v2 = (e1 + 1) / 1.5;
      if (v2 < 0) v2 = 0;
      if (v2 > 1) v2 = 1;

      var s2 = 0;
      if (v2 > 0) {
        var sc = Math.sqrt(3) * v2;
        s2 = (e2 + sc / 2) / sc;
      }

      if (s2 < 0) s2 = 0;
      if (s2 > 1) s2 = 1;

      return { saturation: s2, value: v2 };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          itemType = _props3.itemType,
          radius = _props3.radius,
          thickness = _props3.thickness;


      var hue = this.getHue();

      var _getSaturationValue = this.getSaturationValue(),
          saturation = _getSaturationValue.saturation,
          value = _getSaturationValue.value;

      return _react2.default.createElement(_Rainbow2.default, {
        hue: hue,
        saturation: saturation,
        value: value,
        radius: this.props.radius,
        componentId: this.props.componentId,
        thickness: this.props.thickness
      });
    }
  }]);

  return CustomDragLayer;
}(_react2.default.PureComponent);

var collect = function collect(monitor, props) {
  var currentOffset = monitor.getClientOffset();

  var offset = null;
  if (currentOffset) {
    var x = currentOffset.x,
        y = currentOffset.y;

    var _monitor$getItem = monitor.getItem(),
        boundingBox = _monitor$getItem.boundingBox;

    var left = boundingBox.left,
        top = boundingBox.top;


    var x1 = x - left;
    var y1 = y - top;

    offset = { x: x1, y: y1 };
  }

  return {
    itemType: monitor.getItemType(),
    offset: offset
  };
};

exports.default = (0, _reactDnd.DragLayer)(collect)(CustomDragLayer);